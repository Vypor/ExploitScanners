use HTML::Parser;
use LWP::UserAgent;
use LWP::Simple;
use Parallel::ForkManager;

use vars qw( $PROG );
( $PROG = $0 ) =~ s/^.*[\/\\]//;

if ( @ARGV == 0 ) {
    print
"Usage: ./$PROG [IPLIST] [THREADS] [DIR-LIST] [OUTPUT] [TIMEOUT]\nExample: ./$PROG ips.txt 100 directorys output.txt 4\nFormat dir list as:\n    folder1 \n 	folder2 \m ect\n\nIP list format: 1.1.1.1\n";
    print "***EDIT line 15 for custom string searches\n";
    exit;
}
##EDIT THIS TO THE FOLDER YOU WANT TO SEARCH PAGES FOR SPECIFIC TEXT
my $stringsearch = "";
###########################################

my $filename      = $ARGV[3];
my $max_processes = $ARGV[1];
my $pm            = Parallel::ForkManager->new($max_processes);
my $weblist       = $ARGV[0];
open my $handle, '<', $weblist;
chomp( my @webservers = <$handle> );
close $handle;

my $folderlist = $ARGV[2];
open my $lol, '<', $folderlist;
chomp( my @folders = <$lol> );
close $lol;
print "\e[33m[!] Starting\n\e[0m";
print
"\e[33m[!] Using input list: $ARGV[0] | Dir list: $ARGV[2] | Output list: $filename\n\e[0m";
print "\e[33m[!] Using $ARGV[1] Fork's\n\e[0m";

for my $strat (@webservers) {
    foreach (@folders) {

        my $pid - $pm->start and next;
        alarm("$ARGV[4]");

        my $url = "http://$strat/$_/scripts/setup.php";
        my $ua  = LWP::UserAgent->new;
        print "\e[0m[!]Searching \e[31m$url\n\e[0m";
        my $response = $ua->get($url);
        if ( !$response->is_success ) {
        }
        if ( head($url) ) {

            my $parser =
              HTML::Parser->new( 'text_h' => [ \&text_handler, 'dtext' ] );
            $parser->parse( $response->decoded_content );

            sub text_handler {
                chomp( my $text = shift );

                if ( $text =~ /$stringsearch/i ) {
                    open( MYFILE, ">>$filename" );
                    print "\e[32m[+] Found: $url\e[0m\n";
                    print MYFILE "$url\n";
                    close(MYFILE);
                }

            }
        }
        else {
        }
        $pm->finish;
    }
}
